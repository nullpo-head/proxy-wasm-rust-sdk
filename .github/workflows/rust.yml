# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Rust

on:
  pull_request:
    branches:
      - "**"

  push:
    branches:
      - proxy-wasm-spec-0.1.0
    tags:
      - "**"

  schedule:
    - cron: "0 0 * * *"

jobs:
  licenses:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check licenses
        run: |
          go get -u github.com/google/addlicense
          export PATH=$PATH:$(go env GOPATH)/bin
          addlicense -check .

  bazel:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazelisk
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry
          key: ${{ hashFiles('WORKSPACE', '.bazelrc', '.bazelversion', 'bazel/cargo/Cargo.lock', 'bazel/dependencies.bzl', 'bazel/repositories.bzl') }}

      - name: Build (wasm32-unknown-unknown)
        run: bazelisk --bazelrc=/dev/null build --platforms=@io_bazel_rules_rust//rust/platform:wasm //...

      - name: Build (wasm32-wasi)
        run: bazelisk --bazelrc=/dev/null build --platforms=@io_bazel_rules_rust//rust/platform:wasi //...

      - name: Format (buildifier)
        run: |
          GO111MODULE=on go get -u github.com/bazelbuild/buildtools/buildifier@3.4.0
          export PATH=$PATH:$(go env GOPATH)/bin
          buildifier -mode=check WORKSPACE
          buildifier -mode=check BUILD
          buildifier -mode=check examples/BUILD

      - name: Format (cargo raze)
        run: |
          cargo install cargo-raze --version 0.7.0
          cp -p bazel/cargo/Cargo.lock .
          rm -rf bazel/cargo/
          cargo raze --output=bazel/cargo
          mv Cargo.lock bazel/cargo/
          git diff --exit-code

  stable:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Update Rust
        run: |
          rustup toolchain install stable --component clippy --component rustfmt
          rustup target add wasm32-unknown-unknown
          rustup target add wasm32-wasi

      - name: Build (wasm32-unknown-unknown)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-unknown-unknown

      - name: Clippy (wasm32-unknown-unknown)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-unknown-unknown

      - name: Build (wasm32-wasi)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-wasi

      - name: Build (wasm32-wasi with wee-alloc)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-wasi --features=wee-alloc

      - name: Clippy (wasm32-wasi)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-wasi

      - name: Clippy (wasm32-wasi with wee-alloc)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-wasi --features=wee-alloc

      - name: Format (rustfmt)
        run: cargo fmt -- --check

      - name: Format (manifest)
        run: cargo verify-project

      - name: Package (docs)
        run: cargo doc --no-deps --target=wasm32-unknown-unknown

      - name: Package (publish)
        run: cargo publish --dry-run --target=wasm32-unknown-unknown

  nightly:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Update Rust
        run: |
          rustup toolchain install nightly --component clippy --component rustfmt
          rustup +nightly target add wasm32-unknown-unknown
          rustup +nightly target add wasm32-wasi
          rustup default nightly

      - name: Build (wasm32-unknown-unknown)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-unknown-unknown

      - name: Clippy (wasm32-unknown-unknown)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-unknown-unknown

      - name: Build (wasm32-wasi)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-wasi

      - name: Build (wasm32-wasi with wee-alloc)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo build --release --all-targets --target=wasm32-wasi --features=wee-alloc

      - name: Clippy (wasm32-wasi)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-wasi

      - name: Clippy (wasm32-wasi with wee-alloc)
        env:
          RUSTFLAGS: -D warnings -C link-args=-S
        run: cargo clippy --release --all-targets --target=wasm32-wasi --features=wee-alloc

      - name: Format (rustfmt)
        run: cargo fmt -- --check

      - name: Format (manifest)
        run: cargo verify-project

      - name: Package (docs)
        run: cargo doc --no-deps --target=wasm32-unknown-unknown

      - name: Package (publish)
        run: cargo publish --dry-run --target=wasm32-unknown-unknown

  outdated:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run cargo outdated
        run: cargo outdated --root-deps-only --exit-code 1

      - name: Check freshness of bazel/cargo/Cargo.lock
        run: |
          cargo generate-lockfile
          mv Cargo.lock bazel/cargo/
          git diff --exit-code

  audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run cargo audit
        run: |
          cp -p bazel/cargo/Cargo.lock .
          cargo audit

  docs:
    name: "Docs"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install Rust"
        run: |
          rustup update stable
          rustup default stable
          rustc -vV

      - name: "Install 'wasm32-unknown-unknown'"
        run: |
          rustup target add wasm32-unknown-unknown

      - name: "Build docs"
        run: |
          cargo doc --no-deps --target=wasm32-unknown-unknown

      - name: "Publish GitHub Pages"
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/proxy-wasm-spec-0.1.0' }}
        run: |
          git fetch origin gh-pages                 # By default, 'actions/checkout' only fetches branch of the commit.
          git worktree add /tmp/rustdoc gh-pages    # Checkout 'gh-pages' branch into '/tmp/rustdoc'
          rm -rf /tmp/rustdoc/*                     # Remove all files (except for hidden files, such as .git directory)
          cp -rp target/wasm32-unknown-unknown/doc/* /tmp/rustdoc/
          cd /tmp/rustdoc
          git add --all                             # This adds, modifies, and removes index entries to match the working tree.
          if ! git diff --cached --exit-code ; then # There might be no changes to commit
            GIT_AUTHOR_NAME="${{ github.event.head_commit.author.name }}" \
              GIT_AUTHOR_EMAIL="${{ github.event.head_commit.author.email }}" \
              GIT_AUTHOR_DATE="${{ github.event.head_commit.timestamp }}" \
              GIT_COMMITTER_NAME="${{ github.event.head_commit.committer.name }}" \
              GIT_COMMITTER_EMAIL="${{ github.event.head_commit.committer.email }}" \
              GIT_COMMITTER_DATE="${{ github.event.head_commit.timestamp }}" \
              git commit -m "${{ github.event.head_commit.message }}"
            git push origin gh-pages
          else
            echo "There are no changes to GitHub Pages."
          fi
          git worktree remove --force /tmp/rustdoc  # Remove the working tree.

  publish:
    name: "Publish Crate"
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    needs:
      - stable
      - nightly
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Install Rust"
        run: |
          rustup update stable
          rustup default stable
          rustc -vV

      - name: "Install 'wasm32-unknown-unknown'"
        run: |
          rustup target add wasm32-unknown-unknown

      - name: "Check version"
        run: |
          version="$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | .version')"
          tag="${GITHUB_REF##*/}"
          if [[ "$version" != "$tag" ]]; then
            echo "Package version according to Cargo.toml ($version) is different from the Git tag ($tag). Did you forget to bump the version in Cargo.toml ?"
            exit 1
          fi

      - name: "Publish"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cargo publish --target=wasm32-unknown-unknown
